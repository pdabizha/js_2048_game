{"mappings":"ACIA,MAAM,EAAO,ICFb,MACE,YACE,EAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,CACA,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,KAAK,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAC/C,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,aAAa,CAAG,CAAA,CACvB,CAEA,KAAK,CAAS,CAAE,CACd,IAAM,EAAe,AAAc,SAAd,GAAwB,AAAc,UAAd,EACvC,EAAY,AAAc,UAAd,GAAyB,AAAc,SAAd,EAEvC,EAAiB,EAAe,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAE1E,EAAiB,EAAe,GAAG,CAAC,AAAC,IAEnC,IAAM,EAAkB,AADH,CAAA,EAAY,EAAI,KAAK,GAAG,OAAO,GAAK,CAAzD,EACqC,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GACjD,EAAc,IAAI,CAAC,UAAU,CAAC,EAAiB,EAAI,MAAM,EAE/D,OAAO,EAAY,EAAY,OAAO,GAAK,CAC7C,GAEA,IAAI,CAAC,KAAK,CAAG,EAAe,EAAiB,IAAI,CAAC,SAAS,CAAC,EAC9D,CAEA,UAAW,CACT,IAAI,CAAC,IAAI,CAAC,OACZ,CAEA,WAAY,CACV,IAAI,CAAC,IAAI,CAAC,QACZ,CAEA,QAAS,CACP,IAAI,CAAC,IAAI,CAAC,KACZ,CAEA,UAAW,CACT,IAAI,CAAC,IAAI,CAAC,OACZ,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CACzC,CAEA,WAAY,QACV,AAAK,IAAI,CAAC,aAAa,CAIA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAC/B,EAAI,IAAI,CAAC,AAAC,GAAS,AAAS,OAAT,IAInB,MAGQ,IAAI,CAAC,mBAAmB,GAMlC,UAHE,OAdA,MAkBX,CAEA,OAAQ,CACN,IAAM,EAAa,IAAI,CAAC,aAAa,CAAC,GAEhC,EAAW,IAAI,CAAC,UAAU,CAAC,GAIjC,OAFA,IAAI,CAAC,aAAa,CAAG,CAAA,EAEd,CACT,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACpD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,aAAa,CAAG,CAAA,CACvB,CAEA,cAAc,CAAK,CAAE,CACnB,IAAM,EAAe,IAAI,CAAC,QAAQ,GAE5B,EAAa,EAAE,CAErB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAa,MAAM,CAAE,IAC3C,IAAK,IAAI,EAAM,EAAG,EAAM,CAAY,CAAC,EAAI,CAAC,MAAM,CAAE,IACjB,IAA3B,CAAY,CAAC,EAAI,CAAC,EAAI,EACxB,EAAW,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,CAAI,GAKjC,IAAM,EAAa,KAAK,GAAG,CAAC,EAAO,EAAW,MAAM,EAE9C,EAAc,EAAE,CAEtB,KAAO,EAAY,MAAM,CAAG,GAAY,CACtC,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAEhE,EAAY,IAAI,CAAC,CAAU,CAAC,EAAY,EACxC,EAAW,MAAM,CAAC,EAAa,EACjC,CAEA,OAAO,CACT,CAEA,WAAW,CAAQ,CAAE,CACnB,IAAM,EAAW,EAAE,CAEnB,IAAK,IAAM,KAAQ,EAAU,CAC3B,IAAM,EAAM,EAAK,GAAG,CACd,EAAM,EAAK,GAAG,AAEpB,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EACjD,EAAS,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,EAAK,MAAO,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,AAAC,EACxD,CAEA,OAAO,CACT,CAEA,qBAAsB,CACpB,IAAM,EAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,IAAI,CAAC,AAAC,GAAS,AAAS,IAAT,IAEpD,EAAkB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAChC,EAAI,IAAI,CAAC,CAAC,EAAM,IAAU,IAAS,CAAG,CAAC,EAAQ,EAAE,GAGpD,EAAgB,AADE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EACX,IAAI,CAAC,AAAC,GACnC,EAAI,IAAI,CAAC,CAAC,EAAM,IAAU,IAAS,CAAG,CAAC,EAAQ,EAAE,GAG1D,OAAO,GAAS,GAAmB,CACrC,CAEA,WAAW,CAAG,CAAE,CAAY,CAAE,CAC5B,IAAM,EAAS,EAAE,CACb,EAAgB,EAEpB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAE,IAC9B,GAAI,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,CAAE,CACzB,IAAM,EAAc,AAAS,EAAT,CAAG,CAAC,EAAE,CAE1B,EAAO,IAAI,CAAC,GACZ,GAAiB,EACjB,GACF,MACE,EAAO,IAAI,CAAC,CAAG,CAAC,EAAE,EAItB,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAId,OAFA,IAAI,CAAC,KAAK,EAAI,EAEP,CACT,CAEA,eAAe,CAAS,CAAE,CAAY,CAAE,CACtC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,MAAM,CAAE,IACpC,IAAK,IAAI,EAAI,EAAG,EAAI,CAAS,CAAC,EAAE,CAAC,MAAM,CAAE,IACvC,GAAI,CAAS,CAAC,EAAE,CAAC,EAAE,GAAK,CAAY,CAAC,EAAE,CAAC,EAAE,CACxC,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAEA,UAAU,CAAM,CAAE,CAChB,OAAO,CAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IAAa,EAAO,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAS,EACzE,CACF,EDvLM,EAAQ,AADD,MAAM,IAAI,CAAC,SAAS,gBAAgB,CAAC,eAC/B,GAAG,CAAC,AAAC,GACf,MAAM,IAAI,CAAC,EAAI,gBAAgB,CAAC,iBAGnC,EAAU,SAAS,aAAa,CAAC,iBACjC,EAAS,SAAS,aAAa,CAAC,gBAEtC,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,IAAM,EAAgB,EAAK,QAAQ,GAEnC,GAAI,AAAqB,YAArB,EAAK,SAAS,GAAkB,CAClC,OAAQ,EAAE,GAAG,EACX,IAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,EAElB,CAEA,GAAI,EAAK,cAAc,CAAC,EAAe,EAAK,KAAK,EAAG,CAClD,IAAM,EAAW,EAAK,UAAU,CAAC,EAAK,aAAa,CAAC,IAEpD,EAAY,EAAM,EAAO,MAAO,EAClC,CAEyB,QAArB,EAAK,SAAS,IAChB,EAAO,SAAS,CAAC,MAAM,CAAC,UAGD,SAArB,EAAK,SAAS,IAChB,EAAQ,SAAS,CAAC,MAAM,CAAC,SAE7B,CACF,GAEA,MAAM,EAAW,SAAS,aAAa,CAAC,kBAElC,EAAS,SAAS,aAAa,CAAC,qBAwBtC,SAAS,EAAY,CAAY,CAAE,CAAE,CAAE,EAAgB,IAAI,CAAE,EAAS,EAAE,EAGtE,AAFc,EAAa,QAAQ,GAE7B,OAAO,CAAC,CAAC,EAAK,KAClB,EAAI,OAAO,CAAC,CAAC,EAAO,KAClB,IAAM,EAAO,CAAE,CAAC,EAAS,CAAC,EAAS,AAEnC,CAAA,EAAK,WAAW,CAAG,AAAU,IAAV,EAAc,GAAK,EACtC,EAAK,SAAS,CAAG,aAEH,IAAV,GACF,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAA,CAAO,EAIvB,QAAlB,GACA,EAAO,IAAI,CAAC,AAAC,GAAM,EAAE,GAAG,GAAK,GAAY,EAAE,GAAG,GAAK,IAEnD,EAAK,SAAS,CAAC,GAAG,CAAC,mBAGrB,EAAK,gBAAgB,CACnB,eACA,KACE,EAAK,SAAS,CAAC,MAAM,CAAC,kBAAmB,mBAC3C,EACA,CAAE,KAAM,CAAA,CAAK,EAEjB,EACF,GAEA,IAAM,EAAQ,EAAa,QAAQ,EAEnC,CAAA,SAAS,aAAa,CAAC,eAAe,WAAW,CAAG,CACtD,CAxDA,EAAO,gBAAgB,CAAC,QAAS,KAC/B,GAAI,EAAO,SAAS,CAAC,QAAQ,CAAC,SAAU,CACtC,IAAM,EAAW,EAAK,KAAK,GAE3B,EAAY,EAAM,EAAO,MAAO,GAChC,EAAS,SAAS,CAAC,GAAG,CAAC,UACvB,EAAO,WAAW,CAAG,SACvB,CAEI,EAAO,SAAS,CAAC,QAAQ,CAAC,aAC5B,EAAK,OAAO,GACZ,EAAY,EAAM,GAClB,EAAS,SAAS,CAAC,MAAM,CAAC,UAC1B,EAAO,SAAS,CAAC,GAAG,CAAC,UACrB,EAAQ,SAAS,CAAC,GAAG,CAAC,UACtB,EAAO,WAAW,CAAG,SAGvB,EAAO,SAAS,CAAC,MAAM,CAAC,SACxB,EAAO,SAAS,CAAC,MAAM,CAAC,UAC1B","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.board = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.isGameStarted = false;\n    }\n    move(direction) {\n        const isHorizontal = direction === 'left' || direction === 'right';\n        const isReverse = direction === 'right' || direction === 'down';\n        let boardToProcess = isHorizontal ? this.board : this.transpose(this.board);\n        boardToProcess = boardToProcess.map((row)=>{\n            const processedRow = isReverse ? row.slice().reverse() : row;\n            const nonZeroElements = processedRow.filter((value)=>value !== 0);\n            const combinedRow = this.joinValues(nonZeroElements, row.length);\n            return isReverse ? combinedRow.reverse() : combinedRow;\n        });\n        this.board = isHorizontal ? boardToProcess : this.transpose(boardToProcess);\n    }\n    moveLeft() {\n        this.move('left');\n    }\n    moveRight() {\n        this.move('right');\n    }\n    moveUp() {\n        this.move('up');\n    }\n    moveDown() {\n        this.move('down');\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        if (!this.isGameStarted) return 'idle';\n        const hasWinningCell = this.board.some((row)=>{\n            return row.some((cell)=>cell === 2048);\n        });\n        if (hasWinningCell) return 'win';\n        const hasMoves = this.checkAvailableMoves();\n        if (!hasMoves) return 'lose';\n        return 'playing';\n    }\n    start() {\n        const randomCell = this.getRandomCell(2);\n        const newCells = this.addNewCell(randomCell);\n        this.isGameStarted = true;\n        return newCells;\n    }\n    restart() {\n        this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.isGameStarted = false;\n    }\n    getRandomCell(count) {\n        const currentBoard = this.getState();\n        const emptyCells = [];\n        for(let row = 0; row < currentBoard.length; row++){\n            for(let col = 0; col < currentBoard[row].length; col++)if (currentBoard[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        const cellsToAdd = Math.min(count, emptyCells.length);\n        const randomCells = [];\n        while(randomCells.length < cellsToAdd){\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            randomCells.push(emptyCells[randomIndex]);\n            emptyCells.splice(randomIndex, 1);\n        }\n        return randomCells;\n    }\n    addNewCell(newIndex) {\n        const newCells = [];\n        for (const cell of newIndex){\n            const row = cell.row;\n            const col = cell.col;\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n            newCells.push({\n                row: row,\n                col: col,\n                value: this.board[row][col]\n            });\n        }\n        return newCells;\n    }\n    checkAvailableMoves() {\n        const hasOs = this.board.some((row)=>row.some((cell)=>cell === 0));\n        const movesHorisontsl = this.board.some((row)=>{\n            return row.some((cell, index)=>cell === row[index + 1]);\n        });\n        const transposedBoard = this.transpose(this.board);\n        const movesVertical = transposedBoard.some((row)=>{\n            return row.some((cell, index)=>cell === row[index + 1]);\n        });\n        return hasOs || movesHorisontsl || movesVertical;\n    }\n    joinValues(arr, targetLength) {\n        const result = [];\n        let scoreIncrease = 0;\n        for(let i = 0; i < arr.length; i++)if (arr[i] === arr[i + 1]) {\n            const mergedValue = arr[i] * 2;\n            result.push(mergedValue);\n            scoreIncrease += mergedValue;\n            i++;\n        } else result.push(arr[i]);\n        while(result.length < targetLength)result.push(0);\n        this.score += scoreIncrease;\n        return result;\n    }\n    isBoardChanged(prevBoard, currentBoard) {\n        for(let i = 0; i < prevBoard.length; i++)for(let j = 0; j < prevBoard[i].length; j++){\n            if (prevBoard[i][j] !== currentBoard[i][j]) return true;\n        }\n        return false;\n    }\n    transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$rows = Array.from(document.querySelectorAll('.field-row'));\nconst $09e991522ca7e64e$var$cells = $09e991522ca7e64e$var$rows.map((row)=>{\n    return Array.from(row.querySelectorAll('.field-cell'));\n});\nconst $09e991522ca7e64e$var$loseSMS = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$winSMS = document.querySelector('.message-win');\ndocument.addEventListener('keydown', (e)=>{\n    const previousBoard = $09e991522ca7e64e$var$game.getState();\n    if ($09e991522ca7e64e$var$game.getStatus() === 'playing') {\n        switch(e.key){\n            case 'ArrowUp':\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case 'ArrowDown':\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            case 'ArrowLeft':\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case 'ArrowRight':\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n        }\n        if ($09e991522ca7e64e$var$game.isBoardChanged(previousBoard, $09e991522ca7e64e$var$game.board)) {\n            const newCells = $09e991522ca7e64e$var$game.addNewCell($09e991522ca7e64e$var$game.getRandomCell(1));\n            $09e991522ca7e64e$var$updateTable($09e991522ca7e64e$var$game, $09e991522ca7e64e$var$cells, 'new', newCells);\n        }\n        if ($09e991522ca7e64e$var$game.getStatus() === 'win') $09e991522ca7e64e$var$winSMS.classList.remove('hidden');\n        if ($09e991522ca7e64e$var$game.getStatus() === 'lose') $09e991522ca7e64e$var$loseSMS.classList.remove('hidden');\n    }\n});\nconst $09e991522ca7e64e$var$startSMS = document.querySelector('.message-start');\nconst $09e991522ca7e64e$var$button = document.querySelector('.controls .button');\n$09e991522ca7e64e$var$button.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains('start')) {\n        const newCells = $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateTable($09e991522ca7e64e$var$game, $09e991522ca7e64e$var$cells, 'new', newCells);\n        $09e991522ca7e64e$var$startSMS.classList.add('hidden');\n        $09e991522ca7e64e$var$button.textContent = 'Restart';\n    }\n    if ($09e991522ca7e64e$var$button.classList.contains('restart')) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateTable($09e991522ca7e64e$var$game, $09e991522ca7e64e$var$cells);\n        $09e991522ca7e64e$var$startSMS.classList.remove('hidden');\n        $09e991522ca7e64e$var$winSMS.classList.add('hidden');\n        $09e991522ca7e64e$var$loseSMS.classList.add('hidden');\n        $09e991522ca7e64e$var$button.textContent = 'Start';\n    }\n    $09e991522ca7e64e$var$button.classList.toggle('start');\n    $09e991522ca7e64e$var$button.classList.toggle('restart');\n});\nfunction $09e991522ca7e64e$var$updateTable(gameInstance, td, animationType = null, coords = []) {\n    const board = gameInstance.getState();\n    board.forEach((row, rowIndex)=>{\n        row.forEach((value, colIndex)=>{\n            const cell = td[rowIndex][colIndex];\n            cell.textContent = value === 0 ? '' : value;\n            cell.className = 'field-cell';\n            if (value !== 0) cell.classList.add(`field-cell--${value}`);\n            if (animationType === 'new' && coords.some((c)=>c.row === rowIndex && c.col === colIndex)) cell.classList.add('field-cell--new');\n            cell.addEventListener('animationend', ()=>{\n                cell.classList.remove('field-cell--new', 'field-cell--move');\n            }, {\n                once: true\n            });\n        });\n    });\n    const score = gameInstance.getScore();\n    document.querySelector('.game-score').textContent = score;\n}\n\n\n//# sourceMappingURL=index.fb897f9f.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst rows = Array.from(document.querySelectorAll('.field-row'));\nconst cells = rows.map((row) => {\n  return Array.from(row.querySelectorAll('.field-cell'));\n});\n\nconst loseSMS = document.querySelector('.message-lose');\nconst winSMS = document.querySelector('.message-win');\n\ndocument.addEventListener('keydown', (e) => {\n  const previousBoard = game.getState();\n\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n    }\n\n    if (game.isBoardChanged(previousBoard, game.board)) {\n      const newCells = game.addNewCell(game.getRandomCell(1));\n\n      updateTable(game, cells, 'new', newCells);\n    }\n\n    if (game.getStatus() === 'win') {\n      winSMS.classList.remove('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      loseSMS.classList.remove('hidden');\n    }\n  }\n});\n\nconst startSMS = document.querySelector('.message-start');\n\nconst button = document.querySelector('.controls .button');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    const newCells = game.start();\n\n    updateTable(game, cells, 'new', newCells);\n    startSMS.classList.add('hidden');\n    button.textContent = 'Restart';\n  }\n\n  if (button.classList.contains('restart')) {\n    game.restart();\n    updateTable(game, cells);\n    startSMS.classList.remove('hidden');\n    winSMS.classList.add('hidden');\n    loseSMS.classList.add('hidden');\n    button.textContent = 'Start';\n  }\n\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n});\n\nfunction updateTable(gameInstance, td, animationType = null, coords = []) {\n  const board = gameInstance.getState();\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const cell = td[rowIndex][colIndex];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n\n      if (\n        animationType === 'new' &&\n        coords.some((c) => c.row === rowIndex && c.col === colIndex)\n      ) {\n        cell.classList.add('field-cell--new');\n      }\n\n      cell.addEventListener(\n        'animationend',\n        () => {\n          cell.classList.remove('field-cell--new', 'field-cell--move');\n        },\n        { once: true },\n      );\n    });\n  });\n\n  const score = gameInstance.getScore();\n\n  document.querySelector('.game-score').textContent = score;\n}\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.board = initialState.map((row) => [...row]);\n    this.score = 0;\n    this.isGameStarted = false;\n  }\n\n  move(direction) {\n    const isHorizontal = direction === 'left' || direction === 'right';\n    const isReverse = direction === 'right' || direction === 'down';\n\n    let boardToProcess = isHorizontal ? this.board : this.transpose(this.board);\n\n    boardToProcess = boardToProcess.map((row) => {\n      const processedRow = isReverse ? row.slice().reverse() : row;\n      const nonZeroElements = processedRow.filter((value) => value !== 0);\n      const combinedRow = this.joinValues(nonZeroElements, row.length);\n\n      return isReverse ? combinedRow.reverse() : combinedRow;\n    });\n\n    this.board = isHorizontal ? boardToProcess : this.transpose(boardToProcess);\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n\n  moveUp() {\n    this.move('up');\n  }\n\n  moveDown() {\n    this.move('down');\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getStatus() {\n    if (!this.isGameStarted) {\n      return 'idle';\n    }\n\n    const hasWinningCell = this.board.some((row) => {\n      return row.some((cell) => cell === 2048);\n    });\n\n    if (hasWinningCell) {\n      return 'win';\n    }\n\n    const hasMoves = this.checkAvailableMoves();\n\n    if (!hasMoves) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  start() {\n    const randomCell = this.getRandomCell(2);\n\n    const newCells = this.addNewCell(randomCell);\n\n    this.isGameStarted = true;\n\n    return newCells;\n  }\n\n  restart() {\n    this.board = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.isGameStarted = false;\n  }\n\n  getRandomCell(count) {\n    const currentBoard = this.getState();\n\n    const emptyCells = [];\n\n    for (let row = 0; row < currentBoard.length; row++) {\n      for (let col = 0; col < currentBoard[row].length; col++) {\n        if (currentBoard[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    const cellsToAdd = Math.min(count, emptyCells.length);\n\n    const randomCells = [];\n\n    while (randomCells.length < cellsToAdd) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n      randomCells.push(emptyCells[randomIndex]);\n      emptyCells.splice(randomIndex, 1);\n    }\n\n    return randomCells;\n  }\n\n  addNewCell(newIndex) {\n    const newCells = [];\n\n    for (const cell of newIndex) {\n      const row = cell.row;\n      const col = cell.col;\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n      newCells.push({ row, col, value: this.board[row][col] });\n    }\n\n    return newCells;\n  }\n\n  checkAvailableMoves() {\n    const hasOs = this.board.some((row) => row.some((cell) => cell === 0));\n\n    const movesHorisontsl = this.board.some((row) => {\n      return row.some((cell, index) => cell === row[index + 1]);\n    });\n    const transposedBoard = this.transpose(this.board);\n    const movesVertical = transposedBoard.some((row) => {\n      return row.some((cell, index) => cell === row[index + 1]);\n    });\n\n    return hasOs || movesHorisontsl || movesVertical;\n  }\n\n  joinValues(arr, targetLength) {\n    const result = [];\n    let scoreIncrease = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === arr[i + 1]) {\n        const mergedValue = arr[i] * 2;\n\n        result.push(mergedValue);\n        scoreIncrease += mergedValue;\n        i++;\n      } else {\n        result.push(arr[i]);\n      }\n    }\n\n    while (result.length < targetLength) {\n      result.push(0);\n    }\n    this.score += scoreIncrease;\n\n    return result;\n  }\n\n  isBoardChanged(prevBoard, currentBoard) {\n    for (let i = 0; i < prevBoard.length; i++) {\n      for (let j = 0; j < prevBoard[i].length; j++) {\n        if (prevBoard[i][j] !== currentBoard[i][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","map","row","score","isGameStarted","move","direction","isHorizontal","isReverse","boardToProcess","transpose","nonZeroElements","processedRow","slice","reverse","filter","value","combinedRow","joinValues","length","moveLeft","moveRight","moveUp","moveDown","getScore","getState","getStatus","some","cell","checkAvailableMoves","start","randomCell","getRandomCell","newCells","addNewCell","restart","count","currentBoard","emptyCells","col","push","cellsToAdd","Math","min","randomCells","randomIndex","floor","random","splice","newIndex","hasOs","movesHorisontsl","index","movesVertical","transposedBoard","arr","targetLength","result","scoreIncrease","i","mergedValue","isBoardChanged","prevBoard","j","matrix","_","colIndex","$09e991522ca7e64e$var$cells","$09e991522ca7e64e$var$rows","Array","from","document","querySelectorAll","$09e991522ca7e64e$var$loseSMS","querySelector","$09e991522ca7e64e$var$winSMS","addEventListener","e","previousBoard","key","$09e991522ca7e64e$var$updateTable","classList","remove","$09e991522ca7e64e$var$startSMS","$09e991522ca7e64e$var$button","gameInstance","td","animationType","coords","forEach","rowIndex","textContent","className","add","c","once","contains","toggle"],"version":3,"file":"index.fb897f9f.js.map"}