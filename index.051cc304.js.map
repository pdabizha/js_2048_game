{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n'use strict';\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n'use strict';\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.initialState = initialState;\n        this.board = initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n        });\n        this.score = 0;\n        this.isGameStarted = false;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"move\",\n            value: function move(direction) {\n                var _this = this;\n                var isHorizontal = direction === 'left' || direction === 'right';\n                var isReverse = direction === 'right' || direction === 'down';\n                var boardToProcess = isHorizontal ? this.board : this.transpose(this.board);\n                boardToProcess = boardToProcess.map(function(row) {\n                    var processedRow = isReverse ? row.slice().reverse() : row;\n                    var nonZeroElements = processedRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    var combinedRow = _this.joinValues(nonZeroElements, row.length);\n                    return isReverse ? combinedRow.reverse() : combinedRow;\n                });\n                this.board = isHorizontal ? boardToProcess : this.transpose(boardToProcess);\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.move('left');\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.move('right');\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.move('up');\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.move('down');\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                if (!this.isGameStarted) return 'idle';\n                var hasWinningCell = this.board.some(function(row) {\n                    return row.some(function(cell) {\n                        return cell === 2048;\n                    });\n                });\n                if (hasWinningCell) return 'win';\n                var hasMoves = this.checkAvailableMoves();\n                if (!hasMoves) return 'lose';\n                return 'playing';\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                var randomCell = this.getRandomCell(2);\n                var newCells = this.addNewCell(randomCell);\n                this.isGameStarted = true;\n                return newCells;\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.board = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                this.score = 0;\n                this.isGameStarted = false;\n            }\n        },\n        {\n            key: \"getRandomCell\",\n            value: function getRandomCell(count) {\n                var currentBoard = this.getState();\n                var emptyCells = [];\n                for(var row = 0; row < currentBoard.length; row++){\n                    for(var col = 0; col < currentBoard[row].length; col++)if (currentBoard[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                var cellsToAdd = Math.min(count, emptyCells.length);\n                var randomCells = [];\n                while(randomCells.length < cellsToAdd){\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    randomCells.push(emptyCells[randomIndex]);\n                    emptyCells.splice(randomIndex, 1);\n                }\n                return randomCells;\n            }\n        },\n        {\n            key: \"addNewCell\",\n            value: function addNewCell(newIndex) {\n                var newCells = [];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = newIndex[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var cell = _step.value;\n                        var row = cell.row;\n                        var col = cell.col;\n                        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n                        newCells.push({\n                            row: row,\n                            col: col,\n                            value: this.board[row][col]\n                        });\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return newCells;\n            }\n        },\n        {\n            key: \"checkAvailableMoves\",\n            value: function checkAvailableMoves() {\n                var hasOs = this.board.some(function(row) {\n                    return row.some(function(cell) {\n                        return cell === 0;\n                    });\n                });\n                var movesHorisontsl = this.board.some(function(row) {\n                    return row.some(function(cell, index) {\n                        return cell === row[index + 1];\n                    });\n                });\n                var transposedBoard = this.transpose(this.board);\n                var movesVertical = transposedBoard.some(function(row) {\n                    return row.some(function(cell, index) {\n                        return cell === row[index + 1];\n                    });\n                });\n                return hasOs || movesHorisontsl || movesVertical;\n            }\n        },\n        {\n            key: \"joinValues\",\n            value: function joinValues(arr, targetLength) {\n                var result = [];\n                var scoreIncrease = 0;\n                for(var i = 0; i < arr.length; i++)if (arr[i] === arr[i + 1]) {\n                    var mergedValue = arr[i] * 2;\n                    result.push(mergedValue);\n                    scoreIncrease += mergedValue;\n                    i++;\n                } else result.push(arr[i]);\n                while(result.length < targetLength)result.push(0);\n                this.score += scoreIncrease;\n                return result;\n            }\n        },\n        {\n            key: \"isBoardChanged\",\n            value: function isBoardChanged(prevBoard, currentBoard) {\n                for(var i = 0; i < prevBoard.length; i++)for(var j = 0; j < prevBoard[i].length; j++){\n                    if (prevBoard[i][j] !== currentBoard[i][j]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"transpose\",\n            value: function transpose(matrix) {\n                return matrix[0].map(function(_, colIndex) {\n                    return matrix.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$rows = Array.from(document.querySelectorAll('.field-row'));\nvar $197cd56b15c33885$var$cells = $197cd56b15c33885$var$rows.map(function(row) {\n    return Array.from(row.querySelectorAll('.field-cell'));\n});\nvar $197cd56b15c33885$var$loseSMS = document.querySelector('.message-lose');\nvar $197cd56b15c33885$var$winSMS = document.querySelector('.message-win');\ndocument.addEventListener('keydown', function(e) {\n    var previousBoard = $197cd56b15c33885$var$game.getState();\n    if ($197cd56b15c33885$var$game.getStatus() === 'playing') {\n        switch(e.key){\n            case 'ArrowUp':\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case 'ArrowDown':\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n            case 'ArrowLeft':\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case 'ArrowRight':\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n        }\n        if ($197cd56b15c33885$var$game.isBoardChanged(previousBoard, $197cd56b15c33885$var$game.board)) {\n            var newCells = $197cd56b15c33885$var$game.addNewCell($197cd56b15c33885$var$game.getRandomCell(1));\n            $197cd56b15c33885$var$updateTable($197cd56b15c33885$var$game, $197cd56b15c33885$var$cells, 'new', newCells);\n        }\n        if ($197cd56b15c33885$var$game.getStatus() === 'win') $197cd56b15c33885$var$winSMS.classList.remove('hidden');\n        if ($197cd56b15c33885$var$game.getStatus() === 'lose') $197cd56b15c33885$var$loseSMS.classList.remove('hidden');\n    }\n});\nvar $197cd56b15c33885$var$startSMS = document.querySelector('.message-start');\nvar $197cd56b15c33885$var$button = document.querySelector('.controls .button');\n$197cd56b15c33885$var$button.addEventListener('click', function() {\n    if ($197cd56b15c33885$var$button.classList.contains('start')) {\n        var newCells = $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$updateTable($197cd56b15c33885$var$game, $197cd56b15c33885$var$cells, 'new', newCells);\n        $197cd56b15c33885$var$startSMS.classList.add('hidden');\n        $197cd56b15c33885$var$button.textContent = 'Restart';\n    }\n    if ($197cd56b15c33885$var$button.classList.contains('restart')) {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$updateTable($197cd56b15c33885$var$game, $197cd56b15c33885$var$cells);\n        $197cd56b15c33885$var$startSMS.classList.remove('hidden');\n        $197cd56b15c33885$var$winSMS.classList.add('hidden');\n        $197cd56b15c33885$var$loseSMS.classList.add('hidden');\n        $197cd56b15c33885$var$button.textContent = 'Start';\n    }\n    $197cd56b15c33885$var$button.classList.toggle('start');\n    $197cd56b15c33885$var$button.classList.toggle('restart');\n});\nfunction $197cd56b15c33885$var$updateTable(gameInstance, td) {\n    var animationType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, coords = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];\n    var board = gameInstance.getState();\n    board.forEach(function(row, rowIndex) {\n        row.forEach(function(value, colIndex) {\n            var cell = td[rowIndex][colIndex];\n            cell.textContent = value === 0 ? '' : value;\n            cell.className = 'field-cell';\n            if (value !== 0) cell.classList.add(\"field-cell--\".concat(value));\n            if (animationType === 'new' && coords.some(function(c) {\n                return c.row === rowIndex && c.col === colIndex;\n            })) cell.classList.add('field-cell--new');\n            cell.addEventListener('animationend', function() {\n                cell.classList.remove('field-cell--new', 'field-cell--move');\n            }, {\n                once: true\n            });\n        });\n    });\n    var score = gameInstance.getScore();\n    document.querySelector('.game-score').textContent = score;\n}\n\n})();\n//# sourceMappingURL=index.051cc304.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst rows = Array.from(document.querySelectorAll('.field-row'));\nconst cells = rows.map((row) => {\n  return Array.from(row.querySelectorAll('.field-cell'));\n});\n\nconst loseSMS = document.querySelector('.message-lose');\nconst winSMS = document.querySelector('.message-win');\n\ndocument.addEventListener('keydown', (e) => {\n  const previousBoard = game.getState();\n\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n    }\n\n    if (game.isBoardChanged(previousBoard, game.board)) {\n      const newCells = game.addNewCell(game.getRandomCell(1));\n\n      updateTable(game, cells, 'new', newCells);\n    }\n\n    if (game.getStatus() === 'win') {\n      winSMS.classList.remove('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      loseSMS.classList.remove('hidden');\n    }\n  }\n});\n\nconst startSMS = document.querySelector('.message-start');\n\nconst button = document.querySelector('.controls .button');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    const newCells = game.start();\n\n    updateTable(game, cells, 'new', newCells);\n    startSMS.classList.add('hidden');\n    button.textContent = 'Restart';\n  }\n\n  if (button.classList.contains('restart')) {\n    game.restart();\n    updateTable(game, cells);\n    startSMS.classList.remove('hidden');\n    winSMS.classList.add('hidden');\n    loseSMS.classList.add('hidden');\n    button.textContent = 'Start';\n  }\n\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n});\n\nfunction updateTable(gameInstance, td, animationType = null, coords = []) {\n  const board = gameInstance.getState();\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const cell = td[rowIndex][colIndex];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n\n      if (\n        animationType === 'new' &&\n        coords.some((c) => c.row === rowIndex && c.col === colIndex)\n      ) {\n        cell.classList.add('field-cell--new');\n      }\n\n      cell.addEventListener(\n        'animationend',\n        () => {\n          cell.classList.remove('field-cell--new', 'field-cell--move');\n        },\n        { once: true },\n      );\n    });\n  });\n\n  const score = gameInstance.getScore();\n\n  document.querySelector('.game-score').textContent = score;\n}\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.board = initialState.map((row) => [...row]);\n    this.score = 0;\n    this.isGameStarted = false;\n  }\n\n  move(direction) {\n    const isHorizontal = direction === 'left' || direction === 'right';\n    const isReverse = direction === 'right' || direction === 'down';\n\n    let boardToProcess = isHorizontal ? this.board : this.transpose(this.board);\n\n    boardToProcess = boardToProcess.map((row) => {\n      const processedRow = isReverse ? row.slice().reverse() : row;\n      const nonZeroElements = processedRow.filter((value) => value !== 0);\n      const combinedRow = this.joinValues(nonZeroElements, row.length);\n\n      return isReverse ? combinedRow.reverse() : combinedRow;\n    });\n\n    this.board = isHorizontal ? boardToProcess : this.transpose(boardToProcess);\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n\n  moveUp() {\n    this.move('up');\n  }\n\n  moveDown() {\n    this.move('down');\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getStatus() {\n    if (!this.isGameStarted) {\n      return 'idle';\n    }\n\n    const hasWinningCell = this.board.some((row) => {\n      return row.some((cell) => cell === 2048);\n    });\n\n    if (hasWinningCell) {\n      return 'win';\n    }\n\n    const hasMoves = this.checkAvailableMoves();\n\n    if (!hasMoves) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  start() {\n    const randomCell = this.getRandomCell(2);\n\n    const newCells = this.addNewCell(randomCell);\n\n    this.isGameStarted = true;\n\n    return newCells;\n  }\n\n  restart() {\n    this.board = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.isGameStarted = false;\n  }\n\n  getRandomCell(count) {\n    const currentBoard = this.getState();\n\n    const emptyCells = [];\n\n    for (let row = 0; row < currentBoard.length; row++) {\n      for (let col = 0; col < currentBoard[row].length; col++) {\n        if (currentBoard[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    const cellsToAdd = Math.min(count, emptyCells.length);\n\n    const randomCells = [];\n\n    while (randomCells.length < cellsToAdd) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n      randomCells.push(emptyCells[randomIndex]);\n      emptyCells.splice(randomIndex, 1);\n    }\n\n    return randomCells;\n  }\n\n  addNewCell(newIndex) {\n    const newCells = [];\n\n    for (const cell of newIndex) {\n      const row = cell.row;\n      const col = cell.col;\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n      newCells.push({ row, col, value: this.board[row][col] });\n    }\n\n    return newCells;\n  }\n\n  checkAvailableMoves() {\n    const hasOs = this.board.some((row) => row.some((cell) => cell === 0));\n\n    const movesHorisontsl = this.board.some((row) => {\n      return row.some((cell, index) => cell === row[index + 1]);\n    });\n    const transposedBoard = this.transpose(this.board);\n    const movesVertical = transposedBoard.some((row) => {\n      return row.some((cell, index) => cell === row[index + 1]);\n    });\n\n    return hasOs || movesHorisontsl || movesVertical;\n  }\n\n  joinValues(arr, targetLength) {\n    const result = [];\n    let scoreIncrease = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === arr[i + 1]) {\n        const mergedValue = arr[i] * 2;\n\n        result.push(mergedValue);\n        scoreIncrease += mergedValue;\n        i++;\n      } else {\n        result.push(arr[i]);\n      }\n    }\n\n    while (result.length < targetLength) {\n      result.push(0);\n    }\n    this.score += scoreIncrease;\n\n    return result;\n  }\n\n  isBoardChanged(prevBoard, currentBoard) {\n    for (let i = 0; i < prevBoard.length; i++) {\n      for (let j = 0; j < prevBoard[i].length; j++) {\n        if (prevBoard[i][j] !== currentBoard[i][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","board","map","row","score","isGameStarted","key","value","direction","_this","isHorizontal","isReverse","boardToProcess","transpose","nonZeroElements","processedRow","reverse","filter","combinedRow","joinValues","move","some","cell","checkAvailableMoves","randomCell","getRandomCell","newCells","addNewCell","count","currentBoard","getState","emptyCells","col","push","cellsToAdd","Math","min","randomCells","randomIndex","floor","random","splice","newIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","err","return","hasOs","movesHorisontsl","index","movesVertical","transposedBoard","targetLength","result","scoreIncrease","mergedValue","prevBoard","j","matrix","_","colIndex","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$cells","$197cd56b15c33885$var$rows","document","querySelectorAll","$197cd56b15c33885$var$loseSMS","querySelector","$197cd56b15c33885$var$winSMS","addEventListener","e","previousBoard","getStatus","moveUp","moveDown","moveLeft","moveRight","isBoardChanged","$197cd56b15c33885$var$updateTable","classList","remove","$197cd56b15c33885$var$startSMS","$197cd56b15c33885$var$button","gameInstance","td","animationType","coords","forEach","rowIndex","textContent","className","add","concat","c","once","getScore","contains","start","restart","toggle"],"version":3,"file":"index.051cc304.js.map"}